package telegram

import (
	"context"
	"fmt"
	"strconv"
	"time"

	"github.com/gotd/td/tg"
)

type Message struct {
	ID        int       `json:"id"`
	ChatID    string    `json:"chat_id"`
	ChatName  string    `json:"chat_name"`
	Text      string    `json:"text"`
	Sender    string    `json:"sender"`
	Timestamp time.Time `json:"timestamp"`
	IsRead    bool      `json:"is_read"`
	Out       bool      `json:"out"`
	HasPhoto  bool      `json:"has_photo"`
	PhotoID   int64     `json:"photo_id,omitempty"`
}

// GetMessages –æ—Ç—Ä–∏–º—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–∞—Ç—É
func (c *Client) GetMessages(ctx context.Context, chatID int64, limit int) ([]Message, error) {
	var messages []Message

	err := c.Client.Run(ctx, func(ctx context.Context) error {
		// –û—Ç—Ä–∏–º—É—î–º–æ API –∫–ª—ñ—î–Ω—Ç –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ Run callback
		api := c.Client.API()

		// –°—Ç–≤–æ—Ä—é—î–º–æ InputPeer –¥–ª—è —á–∞—Ç—É
		peer, err := c.GetInputPeer(ctx, chatID)
		if err != nil {
			return fmt.Errorf("get input peer error: %w", err)
		}

		// –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
		result, err := api.MessagesGetHistory(ctx, &tg.MessagesGetHistoryRequest{
			Peer:  peer,
			Limit: limit,
		})
		if err != nil {
			return fmt.Errorf("get history error: %w", err)
		}

		var messagesSlice *tg.MessagesMessages
		switch m := result.(type) {
		case *tg.MessagesMessages:
			messagesSlice = m
		case *tg.MessagesMessagesSlice:
			messagesSlice = &tg.MessagesMessages{
				Messages: m.Messages,
				Chats:    m.Chats,
				Users:    m.Users,
			}
		case *tg.MessagesChannelMessages:
			messagesSlice = &tg.MessagesMessages{
				Messages: m.Messages,
				Chats:    m.Chats,
				Users:    m.Users,
			}
		case *tg.MessagesMessagesNotModified:
			return nil
		default:
			return fmt.Errorf("unexpected messages type: %T", result)
		}

		// –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
		users := make(map[int64]*tg.User)
		for _, u := range messagesSlice.Users {
			if user, ok := u.(*tg.User); ok {
				users[user.ID] = user
			}
		}

		// –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		for _, m := range messagesSlice.Messages {
			msg, ok := m.(*tg.Message)
			if !ok {
				continue
			}

			senderName := "Unknown"
			if msg.Out {
				senderName = "You"
			} else {
				// –î–ª—è –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤–∏–∑–Ω–∞—á–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
				if msg.FromID != nil {
					switch fromPeer := msg.FromID.(type) {
					case *tg.PeerUser:
						if user, exists := users[fromPeer.UserID]; exists {
							senderName = GetUserName(user)
						}
					case *tg.PeerChannel:
						senderName = "Channel"
					case *tg.PeerChat:
						senderName = "Chat"
					}
				} else {
					// –Ø–∫—â–æ FromID == nil, –±–µ—Ä–µ–º–æ –∑ PeerID (–¥–ª—è –æ—Å–æ–±–∏—Å—Ç–∏—Ö —á–∞—Ç—ñ–≤)
					if peerUser, ok := msg.PeerID.(*tg.PeerUser); ok {
						if user, exists := users[peerUser.UserID]; exists {
							senderName = GetUserName(user)
						}
					}
				}
			}

			// –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ —Ç–∏–ø –º–µ–¥—ñ–∞
			messageText := msg.Message
			hasPhoto := false
			var photoID int64

			if msg.Media != nil {
				switch media := msg.Media.(type) {
				case *tg.MessageMediaPhoto:
					if photo, ok := media.Photo.(*tg.Photo); ok {
						hasPhoto = true
						photoID = photo.ID
						if messageText == "" {
							messageText = "üì∑ –§–æ—Ç–æ"
						}
					}
				case *tg.MessageMediaDocument:
					if messageText == "" {
						messageText = "üìé –§–∞–π–ª"
					}
				case *tg.MessageMediaGeo:
					if messageText == "" {
						messageText = "üìç –õ–æ–∫–∞—Ü—ñ—è"
					}
				case *tg.MessageMediaContact:
					if messageText == "" {
						messageText = "üë§ –ö–æ–Ω—Ç–∞–∫—Ç"
					}
				case *tg.MessageMediaVenue:
					if messageText == "" {
						messageText = "üìç –ú—ñ—Å—Ü–µ"
					}
				case *tg.MessageMediaWebPage:
					if messageText == "" {
						messageText = "üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è"
					}
				default:
					if messageText == "" {
						messageText = "üí¨ –ú–µ–¥—ñ–∞"
					}
				}
			} else if messageText == "" {
				// –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –º–µ–¥—ñ–∞
				continue
			}

			messages = append(messages, Message{
				ID:        msg.ID,
				ChatID:    strconv.FormatInt(chatID, 10),
				ChatName:  "",
				Text:      messageText,
				Sender:    senderName,
				Timestamp: time.Unix(int64(msg.Date), 0),
				IsRead:    !msg.Out || msg.Out && msg.ID <= 0,
				Out:       msg.Out,
				HasPhoto:  hasPhoto,
				PhotoID:   photoID,
			})
		}

		return nil
	})

	return messages, err
}

// SendMessage –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
func (c *Client) SendMessage(ctx context.Context, chatID int64, text string) (int, error) {
	var messageID int

	err := c.Client.Run(ctx, func(ctx context.Context) error {
		// –û—Ç—Ä–∏–º—É—î–º–æ API –∫–ª—ñ—î–Ω—Ç –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ Run callback
		api := c.Client.API()

		// –°—Ç–≤–æ—Ä—é—î–º–æ InputPeer –¥–ª—è —á–∞—Ç—É
		peer, err := c.GetInputPeer(ctx, chatID)
		if err != nil {
			return fmt.Errorf("get input peer error: %w", err)
		}

		// –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π ID –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		randomID := time.Now().UnixNano()

		// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		updates, err := api.MessagesSendMessage(ctx, &tg.MessagesSendMessageRequest{
			Peer:     peer,
			Message:  text,
			RandomID: randomID,
		})
		if err != nil {
			return fmt.Errorf("send message error: %w", err)
		}

		// –û—Ç—Ä–∏–º—É—î–º–æ ID –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		switch u := updates.(type) {
		case *tg.Updates:
			if len(u.Updates) > 0 {
				if msgUpdate, ok := u.Updates[0].(*tg.UpdateMessageID); ok {
					messageID = msgUpdate.ID
				}
			}
		case *tg.UpdateShortSentMessage:
			messageID = u.ID
		}

		return nil
	})

	return messageID, err
}

// MarkAsRead –ø–æ–∑–Ω–∞—á–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω—ñ
func (c *Client) MarkAsRead(ctx context.Context, chatID int64, maxID int) error {
	return c.Client.Run(ctx, func(ctx context.Context) error {
		// –û—Ç—Ä–∏–º—É—î–º–æ API –∫–ª—ñ—î–Ω—Ç –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ Run callback
		api := c.Client.API()

		// –°—Ç–≤–æ—Ä—é—î–º–æ InputPeer –¥–ª—è —á–∞—Ç—É
		peer, err := c.GetInputPeer(ctx, chatID)
		if err != nil {
			return fmt.Errorf("get input peer error: %w", err)
		}

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø peer'–∞
		if _, ok := peer.(*tg.InputPeerChannel); ok {
			// –î–ª—è –∫–∞–Ω–∞–ª—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω—à–∏–π –º–µ—Ç–æ–¥
			_, err = api.ChannelsReadHistory(ctx, &tg.ChannelsReadHistoryRequest{
				Channel: &tg.InputChannel{
					ChannelID:  chatID,
					AccessHash: 0, // TODO: –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ access hash
				},
				MaxID: maxID,
			})
			return err
		}

		// –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö —á–∞—Ç—ñ–≤
		_, err = api.MessagesReadHistory(ctx, &tg.MessagesReadHistoryRequest{
			Peer:  peer,
			MaxID: maxID,
		})
		return err
	})
}

// GetInputPeer —Å—Ç–≤–æ—Ä—é—î InputPeer –¥–ª—è —á–∞—Ç—É
func (c *Client) GetInputPeer(ctx context.Context, chatID int64) (tg.InputPeerClass, error) {
	// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ InputPeerUser
	// –í production –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ç–∏–ø —ñ access_hash –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —á–∞—Ç—É
	return &tg.InputPeerUser{
		UserID: chatID,
	}, nil
}
